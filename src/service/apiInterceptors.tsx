import axios from "axios";
import { logout } from "./authService";
import { BASE_URL } from "./config";
// üéØ MODIFICATION ICI : Importer mmkvStorage au lieu de tokenStorage
import { mmkvStorage } from "@/store/storage";
import { Alert } from "react-native"; // Import Alert pour les messages utilisateur

export const refresh_tokens = async () => {
  try {
    // üéØ MODIFICATION ICI : Utiliser await mmkvStorage.getItem pour r√©cup√©rer le token
    const refreshToken = await mmkvStorage.getItem("refresh_token");

    // Ajouter une v√©rification pour s'assurer que le refresh token existe
    if (!refreshToken || typeof refreshToken !== 'string' || refreshToken === '') {
      console.log("REFRESH TOKEN ERROR: Refresh token manquant ou invalide.");
      await mmkvStorage.removeItem("access_token"); // Nettoyer l'ancien access token
      await mmkvStorage.removeItem("refresh_token"); // Nettoyer l'ancien refresh token
      logout(); // D√©connecter l'utilisateur
      Alert.alert("Session expir√©e", "Veuillez vous reconnecter. (Refresh token manquant)");
      return null; // Retourner null car le rafra√Æchissement a √©chou√©
    }

    const response = await axios.post(`${BASE_URL}/auth/refresh-token`, {
      refresh_token: refreshToken,
    });

    const new_access_token = response.data.access_token;
    const new_refresh_token = response.data.refresh_token;

    // üéØ MODIFICATION ICI : Utiliser await mmkvStorage.setItem pour stocker les nouveaux tokens
    await mmkvStorage.setItem("access_token", new_access_token);
    await mmkvStorage.setItem("refresh_token", new_refresh_token);
    
    return new_access_token;
  } catch (error) {
    console.error("REFRESH TOKEN ERROR:", error); // Utiliser console.error pour les erreurs
    // üéØ MODIFICATION ICI : Utiliser await mmkvStorage.removeItem ou clearAll
    await mmkvStorage.removeItem("access_token"); 
    await mmkvStorage.removeItem("refresh_token");
    // Ou si vous avez une m√©thode clearAll dans mmkvStorage
    // await mmkvStorage.clearAll(); 
    logout(); // S'assurer que la d√©connexion est appel√©e
    Alert.alert("Session expir√©e", "Veuillez vous reconnecter. (Erreur de rafra√Æchissement)");
    return null; // Retourner null en cas d'√©chec
  }
};

export const appAxios = axios.create({
  baseURL: BASE_URL,
});

appAxios.interceptors.request.use(async (config) => {
  // üéØ MODIFICATION ICI : Utiliser await mmkvStorage.getItem pour r√©cup√©rer le token
  const accessToken = await mmkvStorage.getItem("access_token");
  if (accessToken) {
    config.headers.Authorization = `Bearer ${accessToken}`;
  }
  return config;
});

appAxios.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    // V√©rifier si c'est une erreur 401 et si la requ√™te n'a pas d√©j√† √©t√© retent√©e
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // Marquer la requ√™te comme retent√©e
      try {
        const newAccessToken = await refresh_tokens(); // Tenter de rafra√Æchir le token
        if (newAccessToken) {
          // Si un nouveau token est obtenu, mettre √† jour l'en-t√™te et rejouer la requ√™te
          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
          return appAxios(originalRequest); // Utiliser appAxios pour rejouer avec les intercepteurs
        }
      } catch (refreshError) {
        // G√©rer les erreurs si le rafra√Æchissement √©choue (d√©j√† g√©r√© dans refresh_tokens, mais bon de le log ici)
        console.error("Erreur lors du re-tentative de rafra√Æchissement apr√®s 401:", refreshError);
        // Si refresh_tokens a d√©j√† appel√© logout, il n'y a rien de plus √† faire ici.
      }
    }
    // Si ce n'est pas une 401 ou si le rafra√Æchissement a √©chou√©, rejeter l'erreur
    return Promise.reject(error);
  }
);